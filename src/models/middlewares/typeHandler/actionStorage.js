/* eslint no-unused-vars: off */
import keyMap from './keyMap';

export default class ActionStorage {
  constructor(self) {
    this.self = self;
    this.staticActions = {
      0: (e) => self.type(e.key),
      1: (e) => self.type(e.key),
      2: (e) => self.type(e.key),
      3: (e) => self.type(e.key),
      4: (e) => self.type(e.key),
      5: (e) => self.type(e.key),
      6: (e) => self.type(e.key),
      7: (e) => self.type(e.key),
      8: (e) => self.type(e.key),
      9: (e) => self.type(e.key),
      backspace: (e) => self.delete(),
      tab: (e) => {},
      enter: (e) => self.enter(),
      shift: (e) => {},
      ctrl: (e) => {},
      alt: (e) => {},
      pause_break: (e) => {},
      caps_lock: (e) => {},
      escape: (e) => {},
      space: (e) => self.space(),
      page_up: (e) => {},
      page_down: (e) => {},
      end: (e) => {},
      home: (e) => {},
      left_arrow: (e) => self.move('l'),
      up_arrow: (e) => self.move('u'),
      right_arrow: (e) => self.move('r'),
      down_arrow: (e) => self.move('d'),
      insert: (e) => {},
      delete: (e) => self.delete(),
      a: (e) => self.type(e.key),
      b: (e) => self.type(e.key),
      c: (e) => self.type(e.key),
      d: (e) => self.type(e.key),
      e: (e) => self.type(e.key),
      f: (e) => self.type(e.key),
      g: (e) => self.type(e.key),
      h: (e) => self.type(e.key),
      i: (e) => self.type(e.key),
      j: (e) => self.type(e.key),
      k: (e) => self.type(e.key),
      l: (e) => self.type(e.key),
      m: (e) => self.type(e.key),
      n: (e) => self.type(e.key),
      o: (e) => self.type(e.key),
      p: (e) => self.type(e.key),
      q: (e) => self.type(e.key),
      r: (e) => self.type(e.key),
      s: (e) => self.type(e.key),
      t: (e) => self.type(e.key),
      u: (e) => self.type(e.key),
      v: (e) => self.type(e.key),
      w: (e) => self.type(e.key),
      x: (e) => self.type(e.key),
      y: (e) => self.type(e.key),
      z: (e) => self.type(e.key),
      left_window_key: (e) => {},
      right_window_key: (e) => {},
      select_key: (e) => {},
      numpad_0: (e) => self.type(e.key),
      numpad_1: (e) => self.type(e.key),
      numpad_2: (e) => self.type(e.key),
      numpad_3: (e) => self.type(e.key),
      numpad_4: (e) => self.type(e.key),
      numpad_5: (e) => self.type(e.key),
      numpad_6: (e) => self.type(e.key),
      numpad_7: (e) => self.type(e.key),
      numpad_8: (e) => self.type(e.key),
      numpad_9: (e) => self.type(e.key),
      multiply: (e) => self.type(e.key),
      add: (e) => self.type(e.key),
      subtract: (e) => self.type(e.key),
      decimal_point: (e) => self.type(e.key),
      divide: (e) => self.type(e.key),
      f1: (e) => {},
      f2: (e) => {},
      f3: (e) => {},
      f4: (e) => {},
      f5: (e) => {},
      f6: (e) => {},
      f7: (e) => {},
      f8: (e) => {},
      f9: (e) => {},
      f10: (e) => {},
      f11: (e) => {},
      f12: (e) => {},
      num_lock: (e) => {},
      scroll_lock: (e) => {},
      semi_colon: (e) => self.type(e.key),
      equal_sign: (e) => self.type(e.key),
      comma: (e) => self.type(e.key),
      dash: (e) => self.type(e.key),
      period: (e) => self.type(e.key),
      forward_slash: (e) => self.type(e.key),
      grave_accent: (e) => self.type(e.key),
      open_bracket: (e) => self.type(e.key),
      back_slash: (e) => self.type(e.key),
      close_braket: (e) => self.type(e.key),
      single_quote: (e) => self.type(e.key),
    };
    this.shortcutActions = {};
  }

  get(action, shortcut = false) {
    try {
      if (shortcut) {
        return this.shortcutActions[keyMap[action]];
      }
      return this.staticActions[keyMap[action]];
    } catch {
      return (e) => {};
    }
  }
}
